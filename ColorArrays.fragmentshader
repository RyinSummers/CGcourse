#version 330 core

//输入，来自顶点着色器的颜色
in vec3 fragmentColor;

//输入，来自顶点着色器的纹理坐标
in vec2 fragmentUV;

//输入，来自顶点着色器的世界坐标的顶点位置
in vec3 fragmentPos;

//输入，来自顶点着色器的法向量
in vec3 fragmentNormal;

//输出
out vec4 color;

//纹理图案对象
uniform sampler2D myTextureSampler;

//光源的色彩
uniform vec4 lightColor;

//环境光照强度
uniform float ambientStrength;

//光源位置
uniform vec3 lightPos;

//相机位置
uniform vec3 viewPos;

void main(){
	
	//环境光
	vec4 ambient=ambientStrength * lightColor;
	//光源入射方向
	vec3 lightDir = normalize(lightPos - fragmentPos);
	//漫反射
	vec4 diffuse= max(dot(normalize(fragmentNormal), lightDir), 0.0) * lightColor;
	//反射强度参数
	float specularStrength = 0.5;
	//发光值参数
	int n=32;
	//镜面反射计算公式
	float spec = pow(max(dot(normalize(viewPos - fragmentPos), reflect(-lightDir, normalize(fragmentNormal))), 0.0), n);
	vec4 specular = specularStrength * spec * lightColor;
	color = (ambient + diffuse + specular) * vec4(fragmentColor, 1.0f);
	//* texture(myTextureSampler,fragmentUV) 
}


/*
//输入，来自顶点着色器的颜色
in vec3 fragmentColor;

//输入，来自顶点着色器的纹理坐标
in vec2 fragmentUV;

in vec4 fragmentlightcolor;

//输出
out vec4 color;

void main(){
	color = fragmentlightcolor * vec4(1.0f,0.5f,0.31f,1.0f);
}
*/