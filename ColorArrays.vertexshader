#version 330 core

//第一层缓冲，编号为0，从C++输入数据，顶点位置
layout(location = 0) in vec3 vertexPosition_modelspace;

//第二层缓冲，编号为1，从C++输入数据，顶点颜色
layout(location = 1) in vec3 vertexColor;

//layout(location = 2) in vec2 vertexUV;

//输出数据， 给片段着色器
out vec4 fragmentColor;

//out vec2 fragmentUV;

//静态数据，MVP矩阵
uniform mat4 MVP;

void main(){	

	//顶点位置，参数
	gl_Position =  MVP * vec4(vertexPosition_modelspace,1);

	//片段颜色，传递给片段着色器
	fragmentColor.xyz = vertexColor;
	fragmentColor.a=0.9;
	
	//fragmentUV= vertexUV;
}

